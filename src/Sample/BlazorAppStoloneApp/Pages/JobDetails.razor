@using CodeNetUI_Example.Models
@using System.Text
@using CodeNetUI_Example.Services

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject BackgroundService BackgroundService

<MudDialog>
    <DialogContent>
        <MudTable Hover="true" MultiSelection="true" Breakpoint="Breakpoint.Xs" Loading="@_loading" LoadingProgressColor="Color.Info" ServerData="ServerReload" @ref="jobDetailList">
            <HeaderContent>
                <MudTh>Detail ID</MudTh>
                <MudTh>Message</MudTh>
                <MudTh>Start Date</MudTh>
                <MudTh>Elapsed Time</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Detail ID">@context.Id</MudTd>
                <MudTd DataLabel="Message">@context.Message</MudTd>
                <MudTd DataLabel="Start Date">@((context.StartDate.HasValue) ? context.StartDate.Value.ToString("yyyy/MM/dd HH:mm:ss") : "")</MudTd>
                <MudTd DataLabel="Elapsed Time">@context.ElapsedTime</MudTd>
                <MudTd DataLabel="Status">@context.Status</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="SelectedDelete" Color="Color.Secondary">Selected Delete</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private bool _loading = false;
    private bool _deleteEnable = false;
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    PagingResponse<JobWorkingDetailModel>? model;
    private MudTable<JobWorkingDetailModel> jobDetailList;

    [Parameter]
    public int JobId { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    private async Task<TableData<JobWorkingDetailModel>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        _loading = true;
        model = await BackgroundService.GetJobDetails(JobId, state.Page + 1, state.PageSize, cancellationToken);
        _loading = false;

        return new TableData<JobWorkingDetailModel>() { TotalItems = model?.TotalCount ?? 0, Items = model?.List ?? [] };
    }

    private async Task SelectedDelete()
    {
        if (jobDetailList is not null)
        {
            if (jobDetailList.SelectedItems is null || !jobDetailList.SelectedItems.Any())
            {
                Snackbar.Add("No selected item.", Severity.Warning);
                return;
            }

            bool? validate = await DialogService.ShowMessageBox(
                "Details delete",
                "Delete selected records?",
                yesText: "Yes!", cancelText: "Cancel");
            if (validate != true)
                return;

            var deleteIds = jobDetailList.SelectedItems.Select(c => c.Id).ToArray();
            var result = await BackgroundService.DeleteDetails(deleteIds);
            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add("Successfull deleted items.", Severity.Success);
                jobDetailList?.ReloadServerData();
            }
            else
                Snackbar.Add("Fail deleted items.", Severity.Error);

            return;
        }
        Snackbar.Add("No table.", Severity.Warning);
        return;
    }
}