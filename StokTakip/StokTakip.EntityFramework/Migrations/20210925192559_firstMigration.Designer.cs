// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StokTakip.EntityFramework.Models;

namespace StokTakip.EntityFramework.Migrations
{
    [DbContext(typeof(StokTakipContext))]
    [Migration("20210925192559_firstMigration")]
    partial class firstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AmountOrRate")
                        .HasColumnType("bit");

                    b.Property<int>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.CampaignRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("CampaignRequirement");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.CampaignUsedHistory", b =>
                {
                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UsedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CampaignId", "SalesOrderId")
                        .HasName("pk_CampaignUsedHistory");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("CampaignUsedHistory");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyType");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.DiscountCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AmountOrRate")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("DiscountCode");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.DiscountCodeRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("ProductId");

                    b.ToTable("DiscountCodeRequirement");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.DiscountCodeUsedHistory", b =>
                {
                    b.Property<int>("DiscountCodeId")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UsedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DiscountCodeId", "SalesOrderId")
                        .HasName("pk_DiscountCodeUsedHistory");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("DiscountCodeUsedHistory");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.GiftCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.ToTable("GiftCard");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.GiftCardHistory", b =>
                {
                    b.Property<int>("GiftCardId")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("bit");

                    b.Property<decimal>("UsedAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<DateTime>("UsedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("GiftCardId", "SalesOrderId")
                        .HasName("pk_GiftCardHistory");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("GiftCardHistory");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(10,5)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategotyId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategotyId");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.ProductAttributeValue", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ProductId", "ProductAttributeId")
                        .HasName("pk_ProductAttributeValue");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductAttributeValue");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("GiftCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GiftCardId");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.SalesOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderDetail");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Campaign", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.CurrencyType", "CurrencyType")
                        .WithMany("Campaigns")
                        .HasForeignKey("CurrencyTypeId")
                        .HasConstraintName("fk_Campaign_CurrencyType")
                        .IsRequired();

                    b.Navigation("CurrencyType");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.CampaignRequirement", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.Campaign", "Campaign")
                        .WithMany("CampaignRequirements")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("fk_CampaignRequirement_Campaing")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.Category", "Category")
                        .WithMany("CampaignRequirements")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_CampaignRequirement_Category");

                    b.HasOne("StokTakip.EntityFramework.Models.Product", "Product")
                        .WithMany("CampaignRequirements")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_CampaignRequirement_Product");

                    b.Navigation("Campaign");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.CampaignUsedHistory", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.Campaign", "Campaign")
                        .WithMany("CampaignUsedHistories")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("fk_CampaignUsedHistory_Campaign")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.SalesOrder", "SalesOrder")
                        .WithMany("CampaignUsedHistories")
                        .HasForeignKey("SalesOrderId")
                        .HasConstraintName("fk_CampaignUsedHistory_SalesOrder")
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Category", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_Category_Category");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.DiscountCode", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.CurrencyType", "CurrencyType")
                        .WithMany("DiscountCodes")
                        .HasForeignKey("CurrencyTypeId")
                        .HasConstraintName("fk_DiscountCode_CurrencyType")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.Customer", "Customer")
                        .WithMany("DiscountCodes")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_DiscountCode_Customer");

                    b.Navigation("CurrencyType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.DiscountCodeRequirement", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.Category", "Category")
                        .WithMany("DiscountCodeRequirements")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_DiscountCodeRequirement_Category");

                    b.HasOne("StokTakip.EntityFramework.Models.DiscountCode", "DiscountCode")
                        .WithMany("DiscountCodeRequirements")
                        .HasForeignKey("DiscountCodeId")
                        .HasConstraintName("fk_DiscountCodeRequirement_DiscountCode")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.Product", "Product")
                        .WithMany("DiscountCodeRequirements")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_DiscountCodeRequirement_Product");

                    b.Navigation("Category");

                    b.Navigation("DiscountCode");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.DiscountCodeUsedHistory", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.DiscountCode", "DiscountCode")
                        .WithMany("DiscountCodeUsedHistories")
                        .HasForeignKey("DiscountCodeId")
                        .HasConstraintName("fk_DiscountCodeUsedHistory_DiscountCode")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.SalesOrder", "SalesOrder")
                        .WithMany("DiscountCodeUsedHistories")
                        .HasForeignKey("SalesOrderId")
                        .HasConstraintName("fk_DiscountCodeUsedHistory_SalesOrder")
                        .IsRequired();

                    b.Navigation("DiscountCode");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.GiftCard", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.CurrencyType", "CurrencyType")
                        .WithMany("GiftCards")
                        .HasForeignKey("CurrencyTypeId")
                        .HasConstraintName("fk_GiftCard_CurrecyType")
                        .IsRequired();

                    b.Navigation("CurrencyType");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.GiftCardHistory", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.GiftCard", "GiftCard")
                        .WithMany("GiftCardHistories")
                        .HasForeignKey("GiftCardId")
                        .HasConstraintName("fk_GiftCardHistory_GiftCard")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.SalesOrder", "SalesOrder")
                        .WithMany("GiftCardHistories")
                        .HasForeignKey("SalesOrderId")
                        .HasConstraintName("fk_GiftCardHistory_SalesOrder")
                        .IsRequired();

                    b.Navigation("GiftCard");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Product", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_Product_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.ProductAttribute", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.Category", "Categoty")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("CategotyId")
                        .HasConstraintName("fk_ProductAttribute_Categoty");

                    b.Navigation("Categoty");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.ProductAttributeValue", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .HasConstraintName("fk_ProductAttributeValue_ProductAttribute")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_ProductAttributeValue_Product")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.ProductPrice", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.CurrencyType", "CurrencyType")
                        .WithMany("ProductPrices")
                        .HasForeignKey("CurrencyTypeId")
                        .HasConstraintName("fk_ProductPrice_CurrencyType")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.Customer", "Customer")
                        .WithMany("ProductPrices")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_ProductPrice_Customer");

                    b.HasOne("StokTakip.EntityFramework.Models.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_ProductPrice_Product")
                        .IsRequired();

                    b.Navigation("CurrencyType");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.SalesOrder", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.CurrencyType", "CurrencyType")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CurrencyTypeId")
                        .HasConstraintName("fk_SalesOrder_CurrencyType")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_SalesOrder_Customer")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.DiscountCode", "DiscountCode")
                        .WithMany("SalesOrders")
                        .HasForeignKey("DiscountCodeId")
                        .HasConstraintName("fk_SalesOrder_DiscountCode");

                    b.HasOne("StokTakip.EntityFramework.Models.Employee", "Employee")
                        .WithMany("SalesOrders")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_SalesOrder_Employee");

                    b.HasOne("StokTakip.EntityFramework.Models.GiftCard", "GiftCard")
                        .WithMany("SalesOrders")
                        .HasForeignKey("GiftCardId")
                        .HasConstraintName("fk_SalesOrder_GiftCard");

                    b.Navigation("CurrencyType");

                    b.Navigation("Customer");

                    b.Navigation("DiscountCode");

                    b.Navigation("Employee");

                    b.Navigation("GiftCard");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.SalesOrderDetail", b =>
                {
                    b.HasOne("StokTakip.EntityFramework.Models.Product", "Product")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_SalesOrderDetail_Product")
                        .IsRequired();

                    b.HasOne("StokTakip.EntityFramework.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("SalesOrderId")
                        .HasConstraintName("fk_SalesOrderDetail_SalesOrder")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Campaign", b =>
                {
                    b.Navigation("CampaignRequirements");

                    b.Navigation("CampaignUsedHistories");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Category", b =>
                {
                    b.Navigation("CampaignRequirements");

                    b.Navigation("DiscountCodeRequirements");

                    b.Navigation("InverseParent");

                    b.Navigation("ProductAttributes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.CurrencyType", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("DiscountCodes");

                    b.Navigation("GiftCards");

                    b.Navigation("ProductPrices");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Customer", b =>
                {
                    b.Navigation("DiscountCodes");

                    b.Navigation("ProductPrices");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.DiscountCode", b =>
                {
                    b.Navigation("DiscountCodeRequirements");

                    b.Navigation("DiscountCodeUsedHistories");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Employee", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.GiftCard", b =>
                {
                    b.Navigation("GiftCardHistories");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.Product", b =>
                {
                    b.Navigation("CampaignRequirements");

                    b.Navigation("DiscountCodeRequirements");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductPrices");

                    b.Navigation("SalesOrderDetails");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("StokTakip.EntityFramework.Models.SalesOrder", b =>
                {
                    b.Navigation("CampaignUsedHistories");

                    b.Navigation("DiscountCodeUsedHistories");

                    b.Navigation("GiftCardHistories");

                    b.Navigation("SalesOrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
